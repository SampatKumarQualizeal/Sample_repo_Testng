/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.0/userguide/java_library_plugin.html
 */
plugins {
    id 'java-library'
    id "io.qameta.allure" version "2.8.1"
    id "org.gradle.test-retry" version "1.1.9"
}

allure {
    version = '2.8.1'
    aspectjweaver = true
    allureJavaVersion = 2.9
}

task IntegrationTest(type: Test) {
    retry {
        maxRetries =  System.getProperty('retryCount','0').toInteger()
        maxFailures = 0
        failOnPassedAfterRetry = true
    }
    ignoreFailures = true
    systemProperty 'browser', System.getProperty('browser', 'chrome')
    systemProperty 'platform', System.getProperty('platform', 'local')
    systemProperty 'env', System.getProperty('env', 'STG')
    systemProperty 'updateJira', System.getProperty('updateJira', 'false')
    systemProperty 'testExecutionId', System.getProperty('testExecutionId', '0000')
    useTestNG() { //This is for Gradle to use TestNG
        //No need to add Custome Listener
        // It will be provided by the TESTNG.XML
        //listeners.add('TestListeners.TestListener')
        useDefaultListeners = true
        outputDirectory = file("$projectDir/testngOutput")
        suites 'src/main/resources/Integration_tests.xml'


    }
}

task IntegrationNew(type: Test) {
    retry {
        maxRetries =  System.getProperty('retryCount','0').toInteger()
        maxFailures = 0
        failOnPassedAfterRetry = true
    }
    ignoreFailures = true
    systemProperty 'browser', System.getProperty('browser', 'chrome')
    systemProperty 'platform', System.getProperty('platform', 'browserStackid')
    systemProperty 'sprintID', System.getProperty('sprintID', 'INT Test Sprint 2023Q3S4')
    systemProperty 'env', System.getProperty('env', 'STG')
    systemProperty 'updateJira', System.getProperty('updateJira', 'false')
    systemProperty 'testExecutionId', System.getProperty('testExecutionId', '0000')
    useTestNG() { //This is for Gradle to use TestNG
        //No need to add Custome Listener
        // It will be provided by the TESTNG.XML
        //listeners.add('TestListeners.TestListener')
        useDefaultListeners = true
        outputDirectory = file("$projectDir/testngOutput")
        suites 'src/main/resources/Integration_New.xml'


    }
}


task Integration_Reviewed_Phoenix(type: Test) {
    retry {
        maxRetries =  System.getProperty('retryCount','0').toInteger()
        maxFailures = 0
        failOnPassedAfterRetry = true
    }
    ignoreFailures = true
    systemProperty 'browser', System.getProperty('browser', 'chrome')
    systemProperty 'platform', System.getProperty('platform', 'local')
    systemProperty 'env', System.getProperty('env', 'STG')
    systemProperty 'updateJira', System.getProperty('updateJira', 'false')
    systemProperty 'testExecutionId', System.getProperty('testExecutionId', '000000')
    useTestNG() { //This is for Gradle to use TestNG
        //No need to add Custome Listener
        // It will be provided by the TESTNG.XML
        //listeners.add('TestListeners.TestListener')
        useDefaultListeners = true
        outputDirectory = file("$projectDir/testngOutput")
        suites 'src/main/resources/Integration_Reviewed_Phoenix.xml'


    }
}

task Integration_Smoke(type: Test) {
    retry {
        maxRetries =  System.getProperty('retryCount','0').toInteger()
        maxFailures = 0
        failOnPassedAfterRetry = true
    }
    ignoreFailures = true
    systemProperty 'browser', System.getProperty('browser', 'chrome')
    systemProperty 'platform', System.getProperty('platform', 'local')
    systemProperty 'env', System.getProperty('env', 'STG')
    systemProperty 'updateJira', System.getProperty('updateJira', 'false')
    systemProperty 'testExecutionId', System.getProperty('testExecutionId', '0000')
    useTestNG() { //This is for Gradle to use TestNG
        //No need to add Custome Listener
        // It will be provided by the TESTNG.XML
        //listeners.add('TestListeners.TestListener')
        useDefaultListeners = true
        outputDirectory = file("$projectDir/testngOutput")
        suites 'src/main/resources/Integration_Smoke.xml'
    }
}

task IntegrationLocal(type: Test) {
    retry {
        maxRetries =  System.getProperty('retryCount','0').toInteger()
        maxFailures = 0
        failOnPassedAfterRetry = true
    }
    ignoreFailures = true
    systemProperty 'browser', System.getProperty('browser', 'chrome')
    systemProperty 'platform', System.getProperty('platform', 'local')
    systemProperty 'env', System.getProperty('env', 'STG')
    systemProperty 'updateJira', System.getProperty('updateJira', 'false')
    systemProperty 'testExecutionId', System.getProperty('testExecutionId', '0000')
    useTestNG() { //This is for Gradle to use TestNG
        //No need to add Custome Listener
        // It will be provided by the TESTNG.XML
        //listeners.add('TestListeners.TestListener')
        useDefaultListeners = true
        outputDirectory = file("$projectDir/testngOutput")
        suites 'src/main/resources/Integration_Local.xml'
    }
}

task IntegrationRerun(type: Test) {
    retry {
        maxRetries =  System.getProperty('retryCount','0').toInteger()
        maxFailures = 0
        failOnPassedAfterRetry = true
    }
    ignoreFailures = true
    systemProperty 'browser', System.getProperty('browser', 'chrome')
    systemProperty 'platform', System.getProperty('platform', 'local')
    systemProperty 'env', System.getProperty('env', 'STG')
    systemProperty 'updateJira', System.getProperty('updateJira', 'false')
    systemProperty 'testExecutionId', System.getProperty('testExecutionId', '0000')
    useTestNG() { //This is for Gradle to use TestNG
        //No need to add Custome Listener
        // It will be provided by the TESTNG.XML
        //listeners.add('TestListeners.TestListener')
        useDefaultListeners = true
        outputDirectory = file("$projectDir/testngOutput")
        suites 'src/main/resources/Integration_Rerun.xml'


    }
}

task IntegrationRerun2(type: Test) {
    retry {
        maxRetries =  System.getProperty('retryCount','0').toInteger()
        maxFailures = 0
        failOnPassedAfterRetry = true
    }
    ignoreFailures = true
    systemProperty 'browser', System.getProperty('browser', 'chrome')
    systemProperty 'platform', System.getProperty('platform', 'local')
    systemProperty 'env', System.getProperty('env', 'STG')
    systemProperty 'updateJira', System.getProperty('updateJira', 'false')
    systemProperty 'testExecutionId', System.getProperty('testExecutionId', '0000')
    useTestNG() { //This is for Gradle to use TestNG
        //No need to add Custome Listener
        // It will be provided by the TESTNG.XML
        //listeners.add('TestListeners.TestListener')
        useDefaultListeners = true
        outputDirectory = file("$projectDir/testngOutput")
        suites 'src/main/resources/Integration_Rerun2.xml'



    }
}


task Integration_Reviewed_Sphinx_1(type: Test) {
    retry {
        maxRetries =  System.getProperty('retryCount','0').toInteger()
        maxFailures = 0
        failOnPassedAfterRetry = true
    }
    ignoreFailures = true
    systemProperty 'browser', System.getProperty('browser', 'chrome')
    systemProperty 'platform', System.getProperty('platform', 'local')
    systemProperty 'env', System.getProperty('env', 'STG')
    systemProperty 'updateJira', System.getProperty('updateJira', 'false')
    systemProperty 'testExecutionId', System.getProperty('testExecutionId', '0000')
    useTestNG() { //This is for Gradle to use TestNG
        //No need to add Custome Listener
        // It will be provided by the TESTNG.XML
        //listeners.add('TestListeners.TestListener')
        useDefaultListeners = true
        outputDirectory = file("$projectDir/testngOutput")
        suites 'src/main/resources/Integration_Reviewed_Sphinx_1.xml'
    }
}

task Integration_Reviewed_Sphinx_2(type: Test) {
    retry {
        maxRetries =  System.getProperty('retryCount','0').toInteger()
        maxFailures = 0
        failOnPassedAfterRetry = true
    }
    ignoreFailures = true
    systemProperty 'browser', System.getProperty('browser', 'chrome')
    systemProperty 'platform', System.getProperty('platform', 'local')
    systemProperty 'env', System.getProperty('env', 'STG')
    systemProperty 'updateJira', System.getProperty('updateJira', 'false')
    systemProperty 'testExecutionId', System.getProperty('testExecutionId', '0000')
    useTestNG() { //This is for Gradle to use TestNG
        //No need to add Custome Listener
        // It will be provided by the TESTNG.XML
        //listeners.add('TestListeners.TestListener')
        useDefaultListeners = true
        outputDirectory = file("$projectDir/testngOutput")
        suites 'src/main/resources/Integration_Reviewed_Sphinx_2.xml'
    }
}

task Integration_Reviewed_Sphinx_3(type: Test) {
    retry {
        maxRetries =  System.getProperty('retryCount','0').toInteger()
        maxFailures = 0
        failOnPassedAfterRetry = true
    }
    ignoreFailures = true
    systemProperty 'browser', System.getProperty('browser', 'chrome')
    systemProperty 'platform', System.getProperty('platform', 'local')
    systemProperty 'env', System.getProperty('env', 'STG')
    systemProperty 'updateJira', System.getProperty('updateJira', 'false')
    systemProperty 'testExecutionId', System.getProperty('testExecutionId', '0000')
    useTestNG() { //This is for Gradle to use TestNG
        //No need to add Custome Listener
        // It will be provided by the TESTNG.XML
        //listeners.add('TestListeners.TestListener')
        useDefaultListeners = true
        outputDirectory = file("$projectDir/testngOutput")
        suites 'src/main/resources/Integration_Reviewed_Sphinx_3.xml'
    }
}

task Integration_Reviewed_Sphinx_4(type: Test) {
    retry {
        maxRetries =  System.getProperty('retryCount','0').toInteger()
        maxFailures = 0
        failOnPassedAfterRetry = true
    }
    ignoreFailures = true
    systemProperty 'browser', System.getProperty('browser', 'chrome')
    systemProperty 'platform', System.getProperty('platform', 'local')
    systemProperty 'env', System.getProperty('env', 'STG')
    systemProperty 'updateJira', System.getProperty('updateJira', 'false')
    systemProperty 'testExecutionId', System.getProperty('testExecutionId', '0000')
    useTestNG() { //This is for Gradle to use TestNG
        //No need to add Custome Listener
        // It will be provided by the TESTNG.XML
        //listeners.add('TestListeners.TestListener')
        useDefaultListeners = true
        outputDirectory = file("$projectDir/testngOutput")
        suites 'src/main/resources/Integration_Reviewed_Sphinx_4.xml'
    }
}

task Integration_Reviewed_Membership(type: Test) {
    retry {
        maxRetries =  System.getProperty('retryCount','0').toInteger()
        maxFailures = 0
        failOnPassedAfterRetry = true
    }
    ignoreFailures = true
    systemProperty 'browser', System.getProperty('browser', 'chrome')
    systemProperty 'platform', System.getProperty('platform', 'local')
    systemProperty 'env', System.getProperty('env', 'STG')
    systemProperty 'updateJira', System.getProperty('updateJira', 'false')
    systemProperty 'testExecutionId', System.getProperty('testExecutionId', '0000')
    useTestNG() { //This is for Gradle to use TestNG
        //No need to add Custome Listener
        // It will be provided by the TESTNG.XML
        //listeners.add('TestListeners.TestListener')
        useDefaultListeners = true
        outputDirectory = file("$projectDir/testngOutput")
        suites 'src/main/resources/Integration_Reviewed_Membership.xml'
    }
}

task Integration_Reviewed_Dragon(type: Test) {
    retry {
        maxRetries =  System.getProperty('retryCount','0').toInteger()
        maxFailures = 0
        failOnPassedAfterRetry = true
    }
    ignoreFailures = true
    systemProperty 'browser', System.getProperty('browser', 'chrome')
    systemProperty 'platform', System.getProperty('platform', 'local')
    systemProperty 'env', System.getProperty('env', 'STG')
    systemProperty 'updateJira', System.getProperty('updateJira', 'false')
    systemProperty 'testExecutionId', System.getProperty('testExecutionId', '0000')
    useTestNG() { //This is for Gradle to use TestNG
        //No need to add Custome Listener
        // It will be provided by the TESTNG.XML
        //listeners.add('TestListeners.TestListener')
        useDefaultListeners = true
        outputDirectory = file("$projectDir/testngOutput")
        suites 'src/main/resources/Integration_Reviewed_Dragon.xml'
    }
}

task Integration_Reviewed_Yeti(type: Test) {
    retry {
        maxRetries =  System.getProperty('retryCount','0').toInteger()
        maxFailures = 0
        failOnPassedAfterRetry = true
    }
    ignoreFailures = true
    systemProperty 'browser', System.getProperty('browser', 'chrome')
    systemProperty 'platform', System.getProperty('platform', 'local')
    systemProperty 'env', System.getProperty('env', 'STG')
    systemProperty 'updateJira', System.getProperty('updateJira', 'false')
    systemProperty 'testExecutionId', System.getProperty('testExecutionId', '0000')
    useTestNG() { //This is for Gradle to use TestNG
        //No need to add Custome Listener
        // It will be provided by the TESTNG.XML
        //listeners.add('TestListeners.TestListener')
        useDefaultListeners = true
        outputDirectory = file("$projectDir/testngOutput")
        suites 'src/main/resources/Integration_Reviewed_Yeti.xml'
    }
}

task Integration_Reviewed_Chimera(type: Test) {
    retry {
        maxRetries =  System.getProperty('retryCount','0').toInteger()
        maxFailures = 0
        failOnPassedAfterRetry = true
    }
    ignoreFailures = true
    systemProperty 'browser', System.getProperty('browser', 'chrome')
    systemProperty 'platform', System.getProperty('platform', 'local')
    systemProperty 'env', System.getProperty('env', 'STG')
    systemProperty 'updateJira', System.getProperty('updateJira', 'false')
    systemProperty 'testExecutionId', System.getProperty('testExecutionId', '0000')
    useTestNG() { //This is for Gradle to use TestNG
        //No need to add Custome Listener
        // It will be provided by the TESTNG.XML
        //listeners.add('TestListeners.TestListener')
        useDefaultListeners = true
        outputDirectory = file("$projectDir/testngOutput")
        suites 'src/main/resources/Integration_Reviewed_Chimera.xml'
    }
}

task Integration_Reviewed(type: Test) {
    retry {
        maxRetries =  System.getProperty('retryCount','0').toInteger()
        maxFailures = 0
        failOnPassedAfterRetry = true
    }
    ignoreFailures = true
    systemProperty 'browser', System.getProperty('browser', 'chrome')
    systemProperty 'platform', System.getProperty('platform', 'local')
    systemProperty 'sprintID', System.getProperty('sprintID', 'INT Test Sprint 2023Q4S1')
    systemProperty 'env', System.getProperty('env', 'STG')
    systemProperty 'updateJira', System.getProperty('updateJira', 'false')
    systemProperty 'testExecutionId', System.getProperty('testExecutionId', '0000')
    useTestNG() { //This is for Gradle to use TestNG
        //No need to add Custome Listener
        // It will be provided by the TESTNG.XML
        //listeners.add('TestListeners.TestListener')
        useDefaultListeners = true
        outputDirectory = file("$projectDir/testngOutput")
        suites 'src/main/resources/Integration_Reviewed.xml'
    }
}

task Integration_Reviewed_PartB(type: Test) {
    retry {
        maxRetries =  System.getProperty('retryCount','0').toInteger()
        maxFailures = 0
        failOnPassedAfterRetry = true
    }
    ignoreFailures = true
    systemProperty 'browser', System.getProperty('browser', 'chrome')
    systemProperty 'platform', System.getProperty('platform', 'local')
    systemProperty 'env', System.getProperty('env', 'STG')
    systemProperty 'updateJira', System.getProperty('updateJira', 'false')
    systemProperty 'testExecutionId', System.getProperty('testExecutionId', '0000')
    useTestNG() { //This is for Gradle to use TestNG
        //No need to add Custome Listener
        // It will be provided by the TESTNG.XML
        //listeners.add('TestListeners.TestListener')
        useDefaultListeners = true
        outputDirectory = file("$projectDir/testngOutput")
        suites 'src/main/resources/Integration_Reviewed_PartB.xml'
    }
}

task Integration_UnReviewed_PartB(type: Test) {
    retry {
        maxRetries =  System.getProperty('retryCount','0').toInteger()
        maxFailures = 0
        failOnPassedAfterRetry = true
    }
    ignoreFailures = true
    systemProperty 'browser', System.getProperty('browser', 'chrome')
    systemProperty 'platform', System.getProperty('platform', 'local')
    systemProperty 'env', System.getProperty('env', 'STG')
    systemProperty 'updateJira', System.getProperty('updateJira', 'false')
    systemProperty 'testExecutionId', System.getProperty('testExecutionId', '0000')
    useTestNG() { //This is for Gradle to use TestNG
        //No need to add Custome Listener
        // It will be provided by the TESTNG.XML
        //listeners.add('TestListeners.TestListener')
        useDefaultListeners = true
        outputDirectory = file("$projectDir/testngOutput")
        suites 'src/main/resources/Integration_UnReviewed_PartB.xml'
    }
}

task Integration_Rerun_Chimera(type: Test) {
    retry {
        maxRetries =  System.getProperty('retryCount','0').toInteger()
        maxFailures = 0
        failOnPassedAfterRetry = true
    }
    ignoreFailures = true
    systemProperty 'browser', System.getProperty('browser', 'chrome')
    systemProperty 'platform', System.getProperty('platform', 'local')
    systemProperty 'env', System.getProperty('env', 'STG')
    systemProperty 'updateJira', System.getProperty('updateJira', 'false')
    systemProperty 'testExecutionId', System.getProperty('testExecutionId', '0000')
    useTestNG() { //This is for Gradle to use TestNG
        //No need to add Custome Listener
        // It will be provided by the TESTNG.XML
        //listeners.add('TestListeners.TestListener')
        useDefaultListeners = true
        outputDirectory = file("$projectDir/testngOutput")
        suites 'src/main/resources/Integration_Rerun_Chimera.xml'
    }
}

task Integration_Rerun_Dragon(type: Test) {
    retry {
        maxRetries =  System.getProperty('retryCount','0').toInteger()
        maxFailures = 0
        failOnPassedAfterRetry = true
    }
    ignoreFailures = true
    systemProperty 'browser', System.getProperty('browser', 'chrome')
    systemProperty 'platform', System.getProperty('platform', 'local')
    systemProperty 'env', System.getProperty('env', 'STG')
    systemProperty 'updateJira', System.getProperty('updateJira', 'false')
    systemProperty 'testExecutionId', System.getProperty('testExecutionId', '0000')
    useTestNG() { //This is for Gradle to use TestNG
        //No need to add Custome Listener
        // It will be provided by the TESTNG.XML
        //listeners.add('TestListeners.TestListener')
        useDefaultListeners = true
        outputDirectory = file("$projectDir/testngOutput")
        suites 'src/main/resources/Integration_Rerun_Dragon.xml'
    }
}

task Integration_Rerun_Membership(type: Test) {
    retry {
        maxRetries =  System.getProperty('retryCount','0').toInteger()
        maxFailures = 0
        failOnPassedAfterRetry = true
    }
    ignoreFailures = true
    systemProperty 'browser', System.getProperty('browser', 'chrome')
    systemProperty 'platform', System.getProperty('platform', 'local')
    systemProperty 'env', System.getProperty('env', 'STG')
    systemProperty 'updateJira', System.getProperty('updateJira', 'false')
    systemProperty 'testExecutionId', System.getProperty('testExecutionId', '0000')
    useTestNG() { //This is for Gradle to use TestNG
        //No need to add Custome Listener
        // It will be provided by the TESTNG.XML
        //listeners.add('TestListeners.TestListener')
        useDefaultListeners = true
        outputDirectory = file("$projectDir/testngOutput")
        suites 'src/main/resources/Integration_Rerun_Membership.xml'
    }
}

task Integration_Rerun_Phoenix(type: Test) {
    retry {
        maxRetries =  System.getProperty('retryCount','0').toInteger()
        maxFailures = 0
        failOnPassedAfterRetry = true
    }
    ignoreFailures = true
    systemProperty 'browser', System.getProperty('browser', 'chrome')
    systemProperty 'platform', System.getProperty('platform', 'local')
    systemProperty 'env', System.getProperty('env', 'STG')
    systemProperty 'updateJira', System.getProperty('updateJira', 'false')
    systemProperty 'testExecutionId', System.getProperty('testExecutionId', '0000')
    useTestNG() { //This is for Gradle to use TestNG
        //No need to add Custome Listener
        // It will be provided by the TESTNG.XML
        //listeners.add('TestListeners.TestListener')
        useDefaultListeners = true
        outputDirectory = file("$projectDir/testngOutput")
        suites 'src/main/resources/Integration_Rerun_Phoenix.xml'
    }
}


task Integration_Rerun_Sphinx(type: Test) {
    retry {
        maxRetries =  System.getProperty('retryCount','0').toInteger()
        maxFailures = 0
        failOnPassedAfterRetry = true
    }
    ignoreFailures = true
    systemProperty 'browser', System.getProperty('browser', 'chrome')
    systemProperty 'platform', System.getProperty('platform', 'local')
    systemProperty 'env', System.getProperty('env', 'STG')
    systemProperty 'updateJira', System.getProperty('updateJira', 'false')
    systemProperty 'testExecutionId', System.getProperty('testExecutionId', '0000')
    useTestNG() { //This is for Gradle to use TestNG
        //No need to add Custome Listener
        // It will be provided by the TESTNG.XML
        //listeners.add('TestListeners.TestListener')
        useDefaultListeners = true
        outputDirectory = file("$projectDir/testngOutput")
        suites 'src/main/resources/Integration_Rerun_Sphinx.xml'
    }
}

task Integration_Rerun_Yeti(type: Test) {
    retry {
        maxRetries =  System.getProperty('retryCount','0').toInteger()
        maxFailures = 0
        failOnPassedAfterRetry = true
    }
    ignoreFailures = true
    systemProperty 'browser', System.getProperty('browser', 'chrome')
    systemProperty 'platform', System.getProperty('platform', 'local')
    systemProperty 'env', System.getProperty('env', 'STG')
    systemProperty 'updateJira', System.getProperty('updateJira', 'false')
    systemProperty 'testExecutionId', System.getProperty('testExecutionId', '0000')
    useTestNG() { //This is for Gradle to use TestNG
        //No need to add Custome Listener
        // It will be provided by the TESTNG.XML
        //listeners.add('TestListeners.TestListener')
        useDefaultListeners = true
        outputDirectory = file("$projectDir/testngOutput")
        suites 'src/main/resources/Integration_Rerun_Yeti.xml'
    }
}

task Integration_Reviewed_PartA(type: Test) {
    retry {
        maxRetries =  System.getProperty('retryCount','0').toInteger()
        maxFailures = 0
        failOnPassedAfterRetry = true
    }
    ignoreFailures = true
    systemProperty 'browser', System.getProperty('browser', 'chrome')
    systemProperty 'platform', System.getProperty('platform', 'local')
    systemProperty 'env', System.getProperty('env', 'STG')
    systemProperty 'updateJira', System.getProperty('updateJira', 'false')
    systemProperty 'testExecutionId', System.getProperty('testExecutionId', '0000')
    useTestNG() { //This is for Gradle to use TestNG
        //No need to add Custome Listener
        // It will be provided by the TESTNG.XML
        //listeners.add('TestListeners.TestListener')
        useDefaultListeners = true
        outputDirectory = file("$projectDir/testngOutput")
        suites 'src/main/resources/Integration_Reviewed_PartA.xml'
    }
}

task Integration_PartB(type: Test) {
    retry {
        maxRetries =  System.getProperty('retryCount','0').toInteger()
        maxFailures = 0
        failOnPassedAfterRetry = true
    }
    ignoreFailures = true
    systemProperty 'browser', System.getProperty('browser', 'chrome')
    systemProperty 'platform', System.getProperty('platform', 'local')
    systemProperty 'env', System.getProperty('env', 'STG')
    systemProperty 'updateJira', System.getProperty('updateJira', 'false')
    systemProperty 'testExecutionId', System.getProperty('testExecutionId', '0000')
    useTestNG() { //This is for Gradle to use TestNG
        //No need to add Custome Listener
        // It will be provided by the TESTNG.XML
        //listeners.add('TestListeners.TestListener')
        useDefaultListeners = true
        outputDirectory = file("$projectDir/testngOutput")
        suites 'src/main/resources/Integration_PartB.xml'
    }
}

task IntegrationDataCreation(type: Test) {
    retry {
        maxRetries =  System.getProperty('retryCount','0').toInteger()
        maxFailures = 0
        failOnPassedAfterRetry = true
    }
    ignoreFailures = true
    systemProperty 'browser', System.getProperty('browser', 'chrome')
    systemProperty 'platform', System.getProperty('platform', 'local')
    systemProperty 'env', System.getProperty('env', 'STG')
    systemProperty 'updateJira', System.getProperty('updateJira', 'false')
    systemProperty 'testExecutionId', System.getProperty('testExecutionId', '0000')
    useTestNG() { //This is for Gradle to use TestNG
        //No need to add Custome Listener
        // It will be provided by the TESTNG.XML
        //listeners.add('TestListeners.TestListener')
        useDefaultListeners = true
        outputDirectory = file("$projectDir/testngOutput")
        suites 'src/main/resources/Integration_DataCreation.xml'
    }
}






repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

dependencies {
    implementation "com.oracle.ojdbc:ojdbc8:19.3.0.0"
    implementation('io.qameta.allure:allure-okhttp3:2.10.0')
    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.18'
// https://mvnrepository.com/artifact/io.appium/java-client
    implementation group: 'io.appium', name: 'java-client', version: '7.3.0'

    // https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.141.59'

// https://mvnrepository.com/artifact/org.testng/testng
    implementation group: 'org.testng', name: 'testng', version: '7.0.0'
// https://mvnrepository.com/artifact/com.relevantcodes/extentreports
    implementation group: 'com.relevantcodes', name: 'extentreports', version: '2.41.2'

// https://mvnrepository.com/artifact/io.rest-assured/rest-assured
    implementation group: 'io.rest-assured', name: 'rest-assured', version: '4.2.0'
// https://mvnrepository.com/artifact/io.rest-assured/json-path
    implementation group: 'io.rest-assured', name: 'json-path', version: '4.2.0'
// https://mvnrepository.com/artifact/io.rest-assured/json-schema-validator
    implementation group: 'io.rest-assured', name: 'json-schema-validator', version: '4.2.0'

// https://mvnrepository.com/artifact/org.apache.poi/poi
    implementation group: 'org.apache.poi', name: 'poi', version: '4.1.2'

// https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml
    implementation group: 'org.apache.poi', name: 'poi-ooxml', version: '4.1.2'

// https://mvnrepository.com/artifact/org.apache.poi/poi-scratchpad
    implementation group: 'org.apache.poi', name: 'poi-scratchpad', version: '4.1.2'

// https://mvnrepository.com/artifact/org.apache.xmlbeans/xmlbeans
    implementation group: 'org.apache.xmlbeans', name: 'xmlbeans', version: '3.1.0'

// https://mvnrepository.com/artifact/com.github.virtuald/curvesapi
    implementation group: 'com.github.virtuald', name: 'curvesapi', version: '1.06'

// https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml-schemas
    implementation group: 'org.apache.poi', name: 'poi-ooxml-schemas', version: '4.1.2'

// https://mvnrepository.com/artifact/ru.yandex.qatools.ashot/ashot
    implementation group: 'ru.yandex.qatools.ashot', name: 'ashot', version: '1.5.3'

// https://mvnrepository.com/artifact/org.apache.commons/commons-email
    implementation group: 'org.apache.commons', name: 'commons-email', version: '1.5'
// https://mvnrepository.com/artifact/log4j/log4j
    implementation group: 'log4j', name: 'log4j', version: '1.2.17'
    implementation 'com.github.stephenc.monte:monte-screen-recorder:0.7.7.0'
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12
    //implementation group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.30'


// https://mvnrepository.com/artifact/io.qameta.allure/allure-testng
    testImplementation group: 'io.qameta.allure', name: 'allure-testng', version: '2.8.1'

// https://mvnrepository.com/artifact/org.apache.commons/commons-text
    implementation group: 'org.apache.commons', name: 'commons-text', version: '1.8'

// https://mvnrepository.com/artifact/commons-configuration/commons-configuration
    implementation group: 'commons-configuration', name: 'commons-configuration', version: '1.10'

// https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core
    //   implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.11.3'



    // https://mvnrepository.com/artifact/org.json/json
    implementation group: 'org.json', name: 'json', version: '20200518'
// https://mvnrepository.com/artifact/com.sikulix/sikulixapi
    implementation group: 'com.sikulix', name: 'sikulixapi', version: '2.0.0'

// https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.3'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.12.3'
    // https://mvnrepository.com/artifact/io.github.bonigarcia/webdrivermanager
    implementation group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '5.6.3'

    implementation group: 'org.everit.json', name: 'org.everit.json.schema', version: '1.5.1'


    // org.jboss.aerogear/aerogear-otp-java
    implementation group: 'org.jboss.aerogear', name: 'aerogear-otp-java', version: '1.0.0'

    // https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'

    // https://mvnrepository.com/artifact/com.microsoft.sqlserver/mssql-jdbc
	implementation group: 'com.microsoft.sqlserver', name: 'mssql-jdbc', version: '9.2.0.jre8'
	implementation group: 'com.microsoft.sqlserver', name: 'mssql-jdbc', version: '9.2.0.jre11'

   // https://mvnrepository.com/artifact/edu.uci.ics/crawler4j
    implementation group: 'edu.uci.ics', name: 'crawler4j', version: '4.4.0'

    // https://mvnrepository.com/artifact/com.sleepycat/je
    implementation group: 'com.sleepycat', name: 'je', version: '18.3.12'

    // https://mvnrepository.com/artifact/org.apache.httpcomponents.client5/httpclient5
    implementation group: 'org.apache.httpcomponents.client5', name: 'httpclient5', version: '5.1'

    // https://mvnrepository.com/artifact/net.sourceforge.tess4j/tess4j
    //implementation group: 'net.sourceforge.tess4j', name: 'tess4j', version: '5.8.0'
    //compile group: 'com.asprise.ocr', name: 'java-ocr-api', version: '[15,)'

    // https://mvnrepository.com/artifact/com.opencsv/opencsv
    implementation group: 'com.opencsv', name: 'opencsv', version: '5.8'

    // https://mvnrepository.com/artifact/org.apache.kafka/kafka-clients
    implementation group: 'org.apache.kafka', name: 'kafka-clients', version: '3.5.1'

    // https://mvnrepository.com/artifact/org.apache.pdfbox/pdfbox
    implementation group: 'org.apache.pdfbox', name: 'pdfbox', version: '2.0.27'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.18.3'

// https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.18.3'



}
